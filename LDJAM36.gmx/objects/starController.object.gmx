<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// feito por Otávio
// Controla as seleções de estrelas

globalvar stars_1;
stars_1 = ds_list_create();

globalvar stars_2;
stars_2 = ds_list_create();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    Star Generator: By Strings
*/

numberOfStarsPerRegion = 30


grid_size_x = 10240
grid_size_y = 7680

grid_regions_x = 16
grid_regions_y = 10


grid_region_size_x = grid_size_x/grid_regions_x
grid_region_size_y = grid_size_y/grid_regions_y

//Randomizes Game Maker seed
randomize();

for (i = 0; i &lt; grid_regions_x; i++) {
    for (j = 0; j &lt; grid_regions_y; j++) {
        for (k = 0; k &lt; numberOfStarsPerRegion; k++) {
            x_random = random_range(i * grid_region_size_x, (i+1) * grid_region_size_x);
            y_random = random_range(j * grid_region_size_y, (j+1) * grid_region_size_y);
            
            inst = instance_create (x_random, y_random, estrelaTest);
            
            with (inst) {
                max_size = 1
                min_size = 0.3
                
                random_size = random_range (min_size, max_size);
                image_xscale = random_size;
                image_yscale = random_size;
            }
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Otavio : Desenha a linha entre duas estrelas selecionadas

/*// flags
var flagX, flagY;
flagX = 0;
flagY = 0;

//loop por todas as estrelas ativas
for (cont = 0; cont &lt;= 10^12; cont++) {
    for (cont2 = 0; cont2 &lt; 10^12; cont2++) {
        //se duas estrelas exisitrem na lista
        if ((star[cont] != noone) &amp;&amp; (star[cont2] != noone) &amp;&amp; (cont != cont2)) {
        
            // verifica se a distancia horizontal dessas estrelas eh a menor registrada ateh agora
            if (star[cont].x &gt; star[cont2].x) {
                if (star[cont].x - star[cont2].x &lt; 75) {
                    flagX = 1
                }
            } 
            else if (star[cont2].x - star[cont].x &lt; 75) {
                    flagX = 1;
            }
              
            
            if (star[cont].y &gt; star[cont2].y) {
                if (star[cont].y - star[cont2].y &lt; 75) {
                    flagY = 1;
                }
            } 
            else if (star[cont2].y - star[cont].y &lt; 75) {
                    flagY = 1;
            }
            
            if (flagX &amp;&amp; flagY) {
                draw_set_colour(c_yellow);
                draw_line(star[cont].x, star[cont].y, star[cont2].x, star[cont2].y);
            }
            flagX = 0;
            flagY = 0;
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
show_debug_message("Got here!!");
for (i = 0; i &lt; ds_list_size(stars_1); i++) {
    s1 = ds_list_find_value(stars_1, i);
    s2 = ds_list_find_value(stars_2, i);
    draw_line_width_colour(s1.x, s1.y, s2.x, s2.y, 5,
                            c_white, c_yellow);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
