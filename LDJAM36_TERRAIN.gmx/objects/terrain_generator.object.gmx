<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
seed = round(random_range(1000000, 10000000));

block_size = 6;

width = room_width / block_size;
height = room_height / block_size;

var max_islands_x = irandom_range(7, 7);
var max_islands_y = irandom_range(4,4);
grid = ds_grid_create(width+1, height+1);
var center_x;
var center_y;

can_draw = true;

var isle_coord_x;
var isle_coord_y;

for(var i = 1; i &lt; max_islands_x; i++)
{    
    for(var j = 1; j &lt; max_islands_y-1; j++) {
        center_x = (i/max_islands_x * room_width)/block_size;
        center_y = (((j+irandom(1))/max_islands_y) * room_height)/block_size;
        isle_coord_x[i-1] = center_x;
        isle_coord_x[j-1] = center_y;
        generate(width, height, grid, block_size, center_x, center_y);

    }
}

// Draw tiles
for(var i = 0; i &lt; width; i++)
{    
    for(var j = 0; j &lt; height; j++) {
        var col = getColorZ(grid[# i, j]);
        if (col == 0)
        {
            tile_add(green_1, 0, 0, block_size, block_size, i*block_size, j*block_size, 0 );
        }
        else if(col == 1)
        {
            tile_add(grey_1, 0, 0, block_size, block_size, i*block_size, j*block_size, 0 );
        }
        else if(col == 2)
        {
            tile_add(blue_1, 0, 0, block_size, block_size, i*block_size, j*block_size, 0 );
        }
        else if(col == 3)
        {
            tile_add(blue_2, 0, 0, block_size, block_size, i*block_size, j*block_size, 0 );
        }
         else if(col == 5)
        {
            tile_add(blue_3, 0, 0, block_size, block_size, i*block_size, j*block_size, 0 );
        }
        else if(col == 4)
        {
            tile_add(grey_2, 0, 0, block_size, block_size, i*block_size, j*block_size, 0 );
        }
    }
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_draw=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for(var i = view_xview[0]/block_size; i &lt; (view_wview[0]+view_xview[0])/block_size; i++) {
    for(var j = view_yview[0]/block_size; j &lt; (view_hview[0]+view_yview[0])/block_size; j++) {
        var col = grid[#i, j];
         
        if (col!=0) {
            draw_set_color(getColorZ(col));
            draw_rectangle(i*block_size, j*block_size, (i+1)*block_size, (j+1)*block_size, false);
        }
    }
    
}
*/

show_debug_message("FPS: " + string(fps_real));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
